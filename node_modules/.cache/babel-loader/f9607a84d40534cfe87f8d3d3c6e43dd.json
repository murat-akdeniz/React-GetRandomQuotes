{"ast":null,"code":"import React from 'react';\nexport default class CurrencyConverter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.from && props.to && props.value) {\n      this.state = {\n        from: props.from.toUpperCase(),\n        to: props.to.toUpperCase(),\n        value: props.value,\n        date: props.date ? props.date : 'latest',\n        convertedValue: null,\n        precision: props.precision ? props.precision > 0 ? props.precision : 2 : 2\n      };\n    } else {\n      throw new Error('Enter valid value as props');\n    }\n  }\n\n  componentDidMount() {\n    const codes = ['CAD', 'HKD', 'ISK', 'PHP', 'DKK', 'HUF', 'CZK', 'AUD', 'RON', 'SEK', 'IDR', 'INR', 'BRL', 'RUB', 'HRK', 'JPY', 'THB', 'CHF', 'SGD', 'PLN', 'BGN', 'TRY', 'CNY', 'NOK', 'NZD', 'ZAR', 'USD', 'MXN', 'ILS', 'GBP', 'KRW', 'MYR', 'EUR'];\n\n    if (!(codes.includes(this.state.from) && codes.includes(this.state.to))) {\n      throw new Error(`Country code is not supprted, supported country codes are: ${codes}`);\n    } else if (typeof this.state.value !== \"number\") {\n      throw new Error(`Input value of exchange is not of type number`);\n    } else {\n      fetch(`https://api.exchangeratesapi.io/${this.state.date}?base=${this.state.from}`, {\n        type: 'GET'\n      }).then(data => data.json()).then(res => {\n        if (res.error) {\n          throw new Error(res.error);\n        } else {\n          let value = this.state.value * res.rates[this.state.to];\n          this.setState({\n            convertedValue: value.toFixed(this.state.precision)\n          });\n        }\n      }).catch(err => {\n        throw new Error(err);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", null, this.state.convertedValue);\n  }\n\n}","map":{"version":3,"sources":["D:/_React/currency-convertor/node_modules/react-currency-conv/dist/currencyConverter.js"],"names":["React","CurrencyConverter","Component","constructor","props","from","to","value","state","toUpperCase","date","convertedValue","precision","Error","componentDidMount","codes","includes","fetch","type","then","data","json","res","error","rates","setState","toFixed","catch","err","render","createElement"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAC7DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AAEA,QAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACE,EAApB,IAA0BF,KAAK,CAACG,KAApC,EAA2C;AACzC,WAAKC,KAAL,GAAa;AACXH,QAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,CAAWI,WAAX,EADK;AAEXH,QAAAA,EAAE,EAAEF,KAAK,CAACE,EAAN,CAASG,WAAT,EAFO;AAGXF,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAHF;AAIXG,QAAAA,IAAI,EAAEN,KAAK,CAACM,IAAN,GAAaN,KAAK,CAACM,IAAnB,GAA0B,QAJrB;AAKXC,QAAAA,cAAc,EAAE,IALL;AAMXC,QAAAA,SAAS,EAAER,KAAK,CAACQ,SAAN,GAAkBR,KAAK,CAACQ,SAAN,GAAkB,CAAlB,GAAsBR,KAAK,CAACQ,SAA5B,GAAwC,CAA1D,GAA8D;AAN9D,OAAb;AAQD,KATD,MASO;AACL,YAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,KAAK,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,EAAqF,KAArF,EAA4F,KAA5F,EAAmG,KAAnG,EAA0G,KAA1G,EAAiH,KAAjH,EAAwH,KAAxH,EAA+H,KAA/H,EAAsI,KAAtI,EAA6I,KAA7I,EAAoJ,KAApJ,EAA2J,KAA3J,EAAkK,KAAlK,EAAyK,KAAzK,EAAgL,KAAhL,EAAuL,KAAvL,EAA8L,KAA9L,EAAqM,KAArM,EAA4M,KAA5M,EAAmN,KAAnN,EAA0N,KAA1N,EAAiO,KAAjO,CAAd;;AAEA,QAAI,EAAEA,KAAK,CAACC,QAAN,CAAe,KAAKR,KAAL,CAAWH,IAA1B,KAAmCU,KAAK,CAACC,QAAN,CAAe,KAAKR,KAAL,CAAWF,EAA1B,CAArC,CAAJ,EAAyE;AACvE,YAAM,IAAIO,KAAJ,CAAW,8DAA6DE,KAAM,EAA9E,CAAN;AACD,KAFD,MAEO,IAAI,OAAO,KAAKP,KAAL,CAAWD,KAAlB,KAA4B,QAAhC,EAA0C;AAC/C,YAAM,IAAIM,KAAJ,CAAW,+CAAX,CAAN;AACD,KAFM,MAEA;AACLI,MAAAA,KAAK,CAAE,mCAAkC,KAAKT,KAAL,CAAWE,IAAK,SAAQ,KAAKF,KAAL,CAAWH,IAAK,EAA5E,EAA+E;AAClFa,QAAAA,IAAI,EAAE;AAD4E,OAA/E,CAAL,CAEGC,IAFH,CAEQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAFhB,EAE6BF,IAF7B,CAEkCG,GAAG,IAAI;AACvC,YAAIA,GAAG,CAACC,KAAR,EAAe;AACb,gBAAM,IAAIV,KAAJ,CAAUS,GAAG,CAACC,KAAd,CAAN;AACD,SAFD,MAEO;AACL,cAAIhB,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAX,GAAmBe,GAAG,CAACE,KAAJ,CAAU,KAAKhB,KAAL,CAAWF,EAArB,CAA/B;AACA,eAAKmB,QAAL,CAAc;AACZd,YAAAA,cAAc,EAAEJ,KAAK,CAACmB,OAAN,CAAc,KAAKlB,KAAL,CAAWI,SAAzB;AADJ,WAAd;AAGD;AACF,OAXD,EAWGe,KAXH,CAWSC,GAAG,IAAI;AACd,cAAM,IAAIf,KAAJ,CAAUe,GAAV,CAAN;AACD,OAbD;AAcD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO,aAAa7B,KAAK,CAAC8B,aAAN,CAAoB,KAApB,EAA2B,IAA3B,EAAiC,KAAKtB,KAAL,CAAWG,cAA5C,CAApB;AACD;;AA7C4D","sourcesContent":["import React from 'react';\nexport default class CurrencyConverter extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.from && props.to && props.value) {\n      this.state = {\n        from: props.from.toUpperCase(),\n        to: props.to.toUpperCase(),\n        value: props.value,\n        date: props.date ? props.date : 'latest',\n        convertedValue: null,\n        precision: props.precision ? props.precision > 0 ? props.precision : 2 : 2\n      };\n    } else {\n      throw new Error('Enter valid value as props');\n    }\n  }\n\n  componentDidMount() {\n    const codes = ['CAD', 'HKD', 'ISK', 'PHP', 'DKK', 'HUF', 'CZK', 'AUD', 'RON', 'SEK', 'IDR', 'INR', 'BRL', 'RUB', 'HRK', 'JPY', 'THB', 'CHF', 'SGD', 'PLN', 'BGN', 'TRY', 'CNY', 'NOK', 'NZD', 'ZAR', 'USD', 'MXN', 'ILS', 'GBP', 'KRW', 'MYR', 'EUR'];\n\n    if (!(codes.includes(this.state.from) && codes.includes(this.state.to))) {\n      throw new Error(`Country code is not supprted, supported country codes are: ${codes}`);\n    } else if (typeof this.state.value !== \"number\") {\n      throw new Error(`Input value of exchange is not of type number`);\n    } else {\n      fetch(`https://api.exchangeratesapi.io/${this.state.date}?base=${this.state.from}`, {\n        type: 'GET'\n      }).then(data => data.json()).then(res => {\n        if (res.error) {\n          throw new Error(res.error);\n        } else {\n          let value = this.state.value * res.rates[this.state.to];\n          this.setState({\n            convertedValue: value.toFixed(this.state.precision)\n          });\n        }\n      }).catch(err => {\n        throw new Error(err);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", null, this.state.convertedValue);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}