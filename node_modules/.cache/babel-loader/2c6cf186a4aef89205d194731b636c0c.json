{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const UseFetch = initialUrl => {\n  _s();\n\n  //defining state hook\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const [url, setUrl] = useState(initialUrl);\n  useEffect(() => {\n    if (!url) return;\n    setIsLoading(true);\n    setData(null);\n    fetch(url).then(response => response.json()).then(data => {\n      setIsLoading(false);\n\n      if (data.cod >= 400) {\n        setError(data.message);\n        return;\n      }\n\n      setData(data);\n    }).catch(error => {\n      setIsLoading(false);\n      setError(error);\n    });\n  }, [url]);\n  return {\n    data,\n    error,\n    isLoading,\n    setUrl\n  };\n};\n\n_s(UseFetch, \"F3lv78lorYy5v82iSYPETfQkjSM=\");\n\n_c = UseFetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseFetch\");","map":{"version":3,"sources":["D:/_React/weather-app/src/hooks/UseFetch.js"],"names":["useState","useEffect","UseFetch","initialUrl","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","fetch","then","response","json","cod","message","catch"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAIA,OAAO,MAAMC,QAAQ,GAAIC,UAAD,IAAgB;AAAA;;AACtC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAACG,UAAD,CAA9B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACS,GAAL,EAAU;AACVD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,OAAO,CAAC,IAAD,CAAP;AAEAO,IAAAA,KAAK,CAACF,GAAD,CAAL,CACGG,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAEST,IAAD,IAAU;AACdK,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAIL,IAAI,CAACY,GAAL,IAAY,GAAhB,EAAqB;AACnBT,QAAAA,QAAQ,CAACH,IAAI,CAACa,OAAN,CAAR;AACA;AACD;;AACDZ,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KATH,EAUGc,KAVH,CAUUZ,KAAD,IAAW;AAChBG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbH;AAcD,GAnBQ,EAmBN,CAACI,GAAD,CAnBM,CAAT;AAoBA,SAAO;AAAEN,IAAAA,IAAF;AAAQE,IAAAA,KAAR;AAAeE,IAAAA,SAAf;AAA0BG,IAAAA;AAA1B,GAAP;AAED,CA7BM;;GAAMT,Q;;KAAAA,Q","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n\r\n\r\nexport const UseFetch = (initialUrl) => {\r\n  //defining state hook\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  useEffect(() => {\r\n    if (!url) return;\r\n    setIsLoading(true);\r\n    setData(null);\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        if (data.cod >= 400) {\r\n          setError(data.message);\r\n          return;\r\n        }\r\n        setData(data);\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        setError(error);\r\n      });\r\n  }, [url]);\r\n  return { data, error, isLoading, setUrl }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}